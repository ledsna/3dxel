using System.Linq;
using UnityEngine;
using UnityEngine.Rendering;
using UnityEngine.Rendering.RenderGraphModule;
using UnityEngine.Rendering.RenderGraphModule.Util;
using UnityEngine.Rendering.Universal;


public class GodRaysPass : ScriptableRenderPass
{
    private GodRaysFeature.Settings defaultSettings;
    private Material material;

    private TextureDesc godRaysTextureDescriptor;

    // Shader Properties
    // -----------------
    private static readonly int sampleCountId = Shader.PropertyToID("_SampleCount");
    private static readonly int densityId = Shader.PropertyToID("_A");
    private static readonly int weightId = Shader.PropertyToID("_B");
    private static readonly int decayId = Shader.PropertyToID("_C");
    private static readonly int exposureId = Shader.PropertyToID("_D");
    private static readonly int godRayColorId = Shader.PropertyToID("_GodRayColor");
    private static readonly int maxDistanceId = Shader.PropertyToID("_MaxDistance");
    private static readonly int jitterVolumetricId = Shader.PropertyToID("_JitterVolumetric");
    private static readonly string drawOnlyGodRaysKeyWord = "_DRAW_GOD_RAYS";

    private static string k_GodRaysTextureName = "_GodRaysTexture";
    private static string k_GodRaysPassName = "GodRaysRenderPass";
    private static LocalKeyword drawGodRaysOnlyLocalKeyword;


    public GodRaysPass(Material material, GodRaysFeature.Settings defaultSettings)
    {
        this.material = material;
        this.defaultSettings = defaultSettings;
        // requiresIntermediateTexture = false; // TODO: Maybe false?
        drawGodRaysOnlyLocalKeyword = new LocalKeyword(material.shader, drawOnlyGodRaysKeyWord);
    }

    class PassData
    {
        internal TextureHandle sourceTexture;
        internal TextureHandle depthCameraTexture;
        internal TextureHandle mainLightShadowMapTexture;
        internal Material material;
    }
    

    public override void RecordRenderGraph(RenderGraph renderGraph, ContextContainer frameData)
    {
        var resourceData = frameData.Get<UniversalResourceData>();
        
        // The following line ensures that the render pass doesn't blit
        // from the back buffer.
        if (resourceData.isActiveTargetBackBuffer)
            return;
        
        var srcCamColor = resourceData.activeColorTexture;
        godRaysTextureDescriptor = srcCamColor.GetDescriptor(renderGraph);
        godRaysTextureDescriptor.name = k_GodRaysTextureName;
        godRaysTextureDescriptor.depthBufferBits = 0;
        godRaysTextureDescriptor.clearBuffer = false;
        godRaysTextureDescriptor.msaaSamples = MSAASamples.None;
        
        var dst = renderGraph.CreateTexture(godRaysTextureDescriptor);
        
        UpdateGodRaysSettings();
        
        // This check is to avoid an error from the material preview in the scene
        if (!srcCamColor.IsValid() || !srcCamColor.IsValid())
            return;
        
        using (var builder = renderGraph.AddRasterRenderPass<PassData>(passName,
                   out var passData))
        {
            // Down Sampling 
            // var divider = (int)defaultSettings.DownSampling;
            // godRaysTextureDescriptor.width /= divider;
            // godRaysTextureDescriptor.height /= divider;

            passData.sourceTexture = srcCamColor;
                
            builder.SetRenderAttachment(dst, 0, AccessFlags.Write);

            passData.depthCameraTexture = resourceData.activeDepthTexture;
            passData.mainLightShadowMapTexture = resourceData.mainShadowsTexture;
            passData.material = material;
            
            builder.UseTexture(passData.depthCameraTexture, AccessFlags.Read);
            builder.UseTexture(passData.mainLightShadowMapTexture, AccessFlags.Read);
            
            builder.SetRenderFunc<PassData>(ExecutePass);
        }
    }
    
    static void ExecutePass(PassData data, RasterGraphContext context)
    {
        Blitter.BlitTexture(context.cmd, data.sourceTexture, new Vector4(1, 1, 0, 0), data.material, 0);
    }

    private void UpdateGodRaysSettings()
    {
        if (material == null) return;

        material.SetInt(sampleCountId, defaultSettings.sampleCount);
        material.SetFloat(densityId, defaultSettings.A);
        material.SetFloat(weightId, defaultSettings.B);
        material.SetFloat(decayId, defaultSettings.C);
        material.SetFloat(exposureId, defaultSettings.D);
        material.SetColor(godRayColorId, defaultSettings.godRayColor);
        material.SetFloat(maxDistanceId, defaultSettings.MaxDistance);
        material.SetFloat(jitterVolumetricId ,defaultSettings.JitterVolumetric);
        
        material.SetKeyword(drawGodRaysOnlyLocalKeyword, defaultSettings.DrawGodRaysOnly);
    }
}