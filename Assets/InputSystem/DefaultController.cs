//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/InputSystem/DefaultController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DefaultController: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DefaultController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DefaultController"",
    ""maps"": [
        {
            ""name"": ""Camera Observation"",
            ""id"": ""d55dcdb2-c6f4-46b4-9431-6b190a85848e"",
            ""actions"": [
                {
                    ""name"": ""Zoom"",
                    ""type"": ""Value"",
                    ""id"": ""7264d425-9908-4b1e-a101-163a8b6e734a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Unzoom"",
                    ""type"": ""Value"",
                    ""id"": ""1a8c9e6b-32be-4503-9328-0b6ed5692852"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""f411527f-bee0-4928-94fc-cedf9a7a505b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""29c62e55-d944-47b2-861d-2ca7eaa04d9f"",
                    ""path"": ""<Mouse>/scroll/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""144f94e8-4333-4254-811e-11ddc93f7569"",
                    ""path"": ""<Mouse>/scroll/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Unzoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c3f23c60-80f7-4719-a4eb-065fbbcc2d5f"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Camera Observation
        m_CameraObservation = asset.FindActionMap("Camera Observation", throwIfNotFound: true);
        m_CameraObservation_Zoom = m_CameraObservation.FindAction("Zoom", throwIfNotFound: true);
        m_CameraObservation_Unzoom = m_CameraObservation.FindAction("Unzoom", throwIfNotFound: true);
        m_CameraObservation_Rotation = m_CameraObservation.FindAction("Rotation", throwIfNotFound: true);
    }

    ~@DefaultController()
    {
        UnityEngine.Debug.Assert(!m_CameraObservation.enabled, "This will cause a leak and performance issues, DefaultController.CameraObservation.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Camera Observation
    private readonly InputActionMap m_CameraObservation;
    private List<ICameraObservationActions> m_CameraObservationActionsCallbackInterfaces = new List<ICameraObservationActions>();
    private readonly InputAction m_CameraObservation_Zoom;
    private readonly InputAction m_CameraObservation_Unzoom;
    private readonly InputAction m_CameraObservation_Rotation;
    public struct CameraObservationActions
    {
        private @DefaultController m_Wrapper;
        public CameraObservationActions(@DefaultController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Zoom => m_Wrapper.m_CameraObservation_Zoom;
        public InputAction @Unzoom => m_Wrapper.m_CameraObservation_Unzoom;
        public InputAction @Rotation => m_Wrapper.m_CameraObservation_Rotation;
        public InputActionMap Get() { return m_Wrapper.m_CameraObservation; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraObservationActions set) { return set.Get(); }
        public void AddCallbacks(ICameraObservationActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraObservationActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraObservationActionsCallbackInterfaces.Add(instance);
            @Zoom.started += instance.OnZoom;
            @Zoom.performed += instance.OnZoom;
            @Zoom.canceled += instance.OnZoom;
            @Unzoom.started += instance.OnUnzoom;
            @Unzoom.performed += instance.OnUnzoom;
            @Unzoom.canceled += instance.OnUnzoom;
            @Rotation.started += instance.OnRotation;
            @Rotation.performed += instance.OnRotation;
            @Rotation.canceled += instance.OnRotation;
        }

        private void UnregisterCallbacks(ICameraObservationActions instance)
        {
            @Zoom.started -= instance.OnZoom;
            @Zoom.performed -= instance.OnZoom;
            @Zoom.canceled -= instance.OnZoom;
            @Unzoom.started -= instance.OnUnzoom;
            @Unzoom.performed -= instance.OnUnzoom;
            @Unzoom.canceled -= instance.OnUnzoom;
            @Rotation.started -= instance.OnRotation;
            @Rotation.performed -= instance.OnRotation;
            @Rotation.canceled -= instance.OnRotation;
        }

        public void RemoveCallbacks(ICameraObservationActions instance)
        {
            if (m_Wrapper.m_CameraObservationActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraObservationActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraObservationActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraObservationActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraObservationActions @CameraObservation => new CameraObservationActions(this);
    public interface ICameraObservationActions
    {
        void OnZoom(InputAction.CallbackContext context);
        void OnUnzoom(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
    }
}
